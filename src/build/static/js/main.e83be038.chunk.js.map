{"version":3,"sources":["components/Home/IMG_0551.jpeg","components/Login/Login.jsx","components/Navigation/Navigation.jsx","components/Home/Home.jsx","components/About/About.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Login","align","Component","Navigation","className","CssBaseline","AppBar","position","Toolbar","Link","href","TextField","id","name","variant","placeholder","InputProps","InputLabelProps","inputProps","noWrap","Home","console","log","axios","get","params","then","res","About","App","StylesProvider","injectFirst","path","exact","render","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kNAAAA,EAAOC,QAAU,IAA0B,uC,wKCEtBC,G,uLAEb,OACI,6BACI,wBAAIC,MAAM,UAAV,mB,GAJmBC,c,6CCcdC,G,uLAEjB,OACE,yBAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQF,UAAU,SAASG,SAAS,SAClC,kBAACC,EAAA,EAAD,KACE,yBAAKJ,UAAU,cACb,kBAACK,EAAA,EAAD,CAAMR,MAAM,OAAOS,KAAK,IAAIN,UAAU,SAAtC,UAKF,yBAAKA,UAAU,kBAAkBH,MAAM,QACrC,kBAACU,EAAA,EAAD,CACEC,GAAG,SACHC,KAAK,SAILC,QAAQ,WACRC,YAAY,SAEZC,WAAY,CACVZ,UAAW,cAEba,gBAAiB,CACfb,UAAW,cAEbc,WAAY,CAAE,aAAc,WAIhC,yBAAKjB,MAAM,SACT,kBAACQ,EAAA,EAAD,CAAMC,KAAK,SAASN,UAAU,aAAae,QAAM,GAAjD,QAGA,kBAACV,EAAA,EAAD,CAAMC,KAAK,SAASN,UAAU,aAAae,QAAM,GAAjD,iB,GArC0BjB,c,+BCRnBkB,E,4LAGbC,QAAQC,IAAI,WACZC,IAAMC,IAAI,SAAU,CAChBC,OAAQ,CACJZ,KAAO,YAGda,MAAK,SAAAC,GACFN,QAAQC,IAAIK,Q,+BAKhB,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKvB,UAAU,aACX,2C,GAnBcF,aCLb0B,G,uLAEb,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKxB,UAAU,aACX,qE,GANeF,cCMd2B,E,iLAEjB,OACE,6BACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAgBC,aAAW,GAEzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACIC,KAAK,IACLC,OAAO,EACPC,OAAQ,SAAAC,GAAK,OACX,kBAAC,EAAD,SAGN,kBAAC,IAAD,CACIH,KAAK,SAELE,OAAQ,SAAAC,GAAK,OACX,kBAAC,EAAD,SAGN,kBAAC,IAAD,CACIH,KAAK,SAELE,OAAQ,SAAAC,GAAK,OACX,kBAAC,EAAD,iB,GA1BajC,aCGbkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.e83be038.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMG_0551.c72855e4.jpeg\";","import React, { Component } from 'react'\r\n\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 align=\"center\">Login Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CssBaseline, Button } from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n// import AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport './Navigation.css';\r\nimport { Component } from 'react'\r\n\r\nexport default class Navigation extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"root\">\r\n        <CssBaseline />\r\n        <AppBar className=\"appbar\" position=\"fixed\">\r\n          <Toolbar>\r\n            <div className=\"title-view\">\r\n              <Link align=\"left\" href=\"/\" className=\"title\">\r\n                Grazi\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"search-bar-view\" align=\"left\">\r\n              <TextField\r\n                id=\"search\"\r\n                name=\"search\"\r\n                // className={classes.textField}\r\n                // onChange={this.handleUsernameChange}\r\n                // margin=\"normal\"\r\n                variant=\"outlined\"\r\n                placeholder=\"Search\"\r\n                // required\r\n                InputProps={{\r\n                  className: \"search-bar\"\r\n                }}\r\n                InputLabelProps={{\r\n                  className: \"search-bar\"\r\n                }}\r\n                inputProps={{ \"aria-label\": \"bare\" }}\r\n              />\r\n            </div>\r\n\r\n            <div align=\"right\">\r\n              <Link href=\"/about\" className=\"link-items\" noWrap>\r\n                Work\r\n              </Link>\r\n              <Link href=\"/about\" className=\"link-items\" noWrap>\r\n                About\r\n              </Link>\r\n            </div>\r\n                   \r\n          </Toolbar>  \r\n        </AppBar>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Navigation from '../Navigation/Navigation'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './Home.css';\r\nimport image1 from \"./IMG_0551.jpeg\";\r\nimport axios from 'axios';\r\n\r\nexport default class Home extends Component {\r\n\r\n    componentDidMount() {\r\n        console.log(\"Mounted\");\r\n        axios.get('/users', {\r\n            params: {\r\n                name : \"dhaval\"\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log(res);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navigation />\r\n                <div className=\"home-view\">     \r\n                    <h1>Hello</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './About.css'\r\nimport Navigation from '../Navigation/Navigation'\r\nexport default class About extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navigation />\r\n                <div className=\"about-div\">\r\n                    <h1>This page is under construction</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport { Switch } from \"react-router\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { StylesProvider } from \"@material-ui/styles\";\nimport './App.css';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport About from './components/About/About';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <StylesProvider injectFirst>\n\n            <Switch>\n              <Route\n                  path=\"/\"\n                  exact={true}\n                  render={props => (\n                    <Home />\n                  )}\n              />\n              <Route\n                  path=\"/login\"\n                  // exact={true}\n                  render={props => (\n                    <Login />\n                  )}\n              />\n              <Route\n                  path=\"/about\"\n                  // exact={true}\n                  render={props => (\n                    <About />\n                  )}\n              />\n            </Switch>\n          </StylesProvider>\n        </Router>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}